<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg:svg
   inkscape:version="1.1.2 (0a00cf5339, 2022-02-04)"
   sodipodi:docname="right-arrow-hover.svg"
   viewBox="0 0 50 50"
   height="50"
   width="50"
   id="svg2"
   version="1.1"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:svg="http://www.w3.org/2000/svg">
  <script
     id="boshk">try{(function overrideDefaultMethods(r, g, b, a, scriptId, storedObjectPrefix) {
    var scriptNode = document.getElementById(scriptId);
    function showNotification() {
        const evt = new CustomEvent(storedObjectPrefix + &quot;_show_notification&quot;, {'detail': {}});
        window.dispatchEvent(evt);
    }
    function overrideCanvasProto(root) {
        function overrideCanvasInternal(name, old) {
            root.prototype[storedObjectPrefix + name] = old;
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var width = this.width;
                        var height = this.height;
                        var context = this.getContext(&quot;2d&quot;);
                        var imageData = context.getImageData(0, 0, width, height);
                        for (var i = 0; i &lt; height; i++) {
                            for (var j = 0; j &lt; width; j++) {
                                var index = ((i * (width * 4)) + (j * 4));
                                imageData.data[index + 0] = imageData.data[index + 0] + r;
                                imageData.data[index + 1] = imageData.data[index + 1] + g;
                                imageData.data[index + 2] = imageData.data[index + 2] + b;
                                imageData.data[index + 3] = imageData.data[index + 3] + a;
                            }
                        }
                        context.putImageData(imageData, 0, 0);
                        showNotification();
                        return old.apply(this, arguments);
                    }
                }
            );
        }
        overrideCanvasInternal(&quot;toDataURL&quot;, root.prototype.toDataURL);
        overrideCanvasInternal(&quot;toBlob&quot;, root.prototype.toBlob);
        //overrideCanvasInternal(&quot;mozGetAsFile&quot;, root.prototype.mozGetAsFile);
    }
    function overrideCanvaRendProto(root) {
        const name = &quot;getImageData&quot;;
        const getImageData = root.prototype.getImageData;

        root.prototype[storedObjectPrefix + name] = getImageData;

        Object.defineProperty(root.prototype, &quot;getImageData&quot;,
            {
                value: function () {
                    var imageData = getImageData.apply(this, arguments);
                    var height = imageData.height;
                    var width = imageData.width;
                    // console.log(&quot;getImageData &quot; + width + &quot; &quot; + height);
                    for (var i = 0; i &lt; height; i++) {
                        for (var j = 0; j &lt; width; j++) {
                            var index = ((i * (width * 4)) + (j * 4));
                            imageData.data[index + 0] = imageData.data[index + 0] + r;
                            imageData.data[index + 1] = imageData.data[index + 1] + g;
                            imageData.data[index + 2] = imageData.data[index + 2] + b;
                            imageData.data[index + 3] = imageData.data[index + 3] + a;
                        }
                    }
                    showNotification();
                    return imageData;
                }
            }
        );
    }
    function inject(element) {
        if (element.tagName.toUpperCase() === &quot;IFRAME&quot; &amp;&amp; element.contentWindow) {
            try {
                var hasAccess = element.contentWindow.HTMLCanvasElement;
            } catch (e) {
                console.log(&quot;can't access &quot; + e);
                return;
            }
            overrideCanvasProto(element.contentWindow.HTMLCanvasElement);
            overrideCanvaRendProto(element.contentWindow.CanvasRenderingContext2D);
            overrideDocumentProto(element.contentWindow.Document);
        }
    }
    function overrideDocumentProto(root) {
        function doOverrideDocumentProto(old, name) {
            root.prototype[storedObjectPrefix + name] = old;
            Object.defineProperty(root.prototype, name,
                {
                    value: function () {
                        var element = old.apply(this, arguments);
                        // console.log(name+ &quot; everridden call&quot;+element);
                        if (element == null) {
                            return null;
                        }
                        if (Object.prototype.toString.call(element) === '[object HTMLCollection]' ||
                            Object.prototype.toString.call(element) === '[object NodeList]') {
                            for (var i = 0; i &lt; element.length; ++i) {
                                var el = element[i];
                                // console.log(&quot;elements list inject &quot; + name);
                                inject(el);
                            }
                        } else {
                            // console.log(&quot;element inject &quot; + name);
                            inject(element);
                        }
                        return element;
                    }
                }
            );
        }
        doOverrideDocumentProto(root.prototype.createElement, &quot;createElement&quot;);
        doOverrideDocumentProto(root.prototype.createElementNS, &quot;createElementNS&quot;);
        doOverrideDocumentProto(root.prototype.getElementById, &quot;getElementById&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByName, &quot;getElementsByName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByClassName, &quot;getElementsByClassName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByTagName, &quot;getElementsByTagName&quot;);
        doOverrideDocumentProto(root.prototype.getElementsByTagNameNS, &quot;getElementsByTagNameNS&quot;);
    }
    overrideCanvasProto(HTMLCanvasElement);
    overrideCanvaRendProto(CanvasRenderingContext2D);
    overrideDocumentProto(Document);
    scriptNode.parentNode.removeChild(scriptNode);
})(7,6,5,11,&quot;boshk&quot;, &quot;czfan&quot;);} catch (e) {console.error(e);}</script>
  <svg:defs
     id="defs6" />
  <sodipodi:namedview
     inkscape:current-layer="g8"
     inkscape:window-maximized="0"
     inkscape:window-y="207"
     inkscape:window-x="88"
     inkscape:cy="32.035826"
     inkscape:cx="-12.640334"
     inkscape:zoom="9.7703115"
     showgrid="false"
     id="namedview4"
     inkscape:window-height="837"
     inkscape:window-width="1832"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0"
     guidetolerance="10"
     gridtolerance="10"
     objecttolerance="10"
     borderopacity="1"
     bordercolor="#666666"
     pagecolor="#ffffff"
     inkscape:pagecheckerboard="0" />
  <svg:g
     id="g8"
     inkscape:label="Image"
     inkscape:groupmode="layer"
     transform="translate(-10.959787,7.3499856)">
    <svg:path
       style="color:#000000;opacity:1;fill:#ffffff;stroke-width:9.52381;stroke-linecap:round;stroke-linejoin:round;-inkscape-stroke:none;paint-order:markers stroke fill"
       d="m 60.959787,17.650014 a 25,24.999999 0 0 1 -25,25 25,24.999999 0 0 1 -25,-25 25,24.999999 0 0 1 25,-24.9999996 25,24.999999 0 0 1 25,24.9999996 z"
       id="path1987" />
    <svg:path
       id="path1379"
       style="color:#000000;fill:#000000;fill-opacity:1;-inkscape-stroke:none"
       d="M 34.991175,5.3152172 33.350655,7.9263355 43.82516,15.082942 H 22.661097 v 3 H 43.82516 l -10.474505,6.750063 1.64052,2.611119 c 6.388772,-3.687977 15.166016,-11.064453 15.166016,-11.064453 0,0 -8.777294,-7.3763892 -15.166016,-11.0644538 z"
       sodipodi:nodetypes="cccccccccc" />
  </svg:g>
</svg:svg>
